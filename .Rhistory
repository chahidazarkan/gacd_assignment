}
## This function computes the inverse of the
## special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated
## (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
i <- i$getinverse()
if (!is.null(i)) {
message("getting cached data")
return (m)
}
matrix <- x$get()
i <- inverse(matrix, ...)
x$getinverse(i)
i
}
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2)
cacheSolve(a)
cacheSolve(a)
## Because matrix inversion is a costly computation, it is
## useful to cache an inverse matrix rather than computing
## repeatedly. The functions in this file allow for the
## the compution and caching of an inverse matrix in R.
## This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function () x
setinverse <- function(solve) i <<- inverse
getinverse <- function () i
list (set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the
## special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated
## (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x=matrix(), ...) {
i <- i$getinverse()
if (!is.null(i)) {
message("getting cached data")
return (i)
}
matrix <- x$get()
i <- solve(matrix, ...)
x$setinverse(i)
i
}
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2)
cacheSolve(a)
cacheSolve(a)
a <- matrx(1:4, 2, 2)
a <- matrix(1:4, 2, 2)
makeCacheMatrix(a)
cacheSolve(A)
cacheSolve(a)
makeCacheMatrix
makeCacheMatrix(matrix(1:4, 2, 2))
## Because matrix inversion is a costly computation, it is
## useful to cache an inverse matrix rather than computing
## repeatedly. The functions in this file allow for the
## the compution and caching of an inverse matrix in R.
## This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function () x
setinverse <- function(solve) i <<- solve
getinverse <- function () i
list (set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the
## special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated
## (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
i <- i$getinverse()
if (!is.null(i)) {
message("getting cached data")
return (i)
}
matrix <- x$get()
i <- solve(matrix, ...)
x$setinverse(i)
i
}
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2)
a
a
a
cacheSolve(a)
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
mat<-matrix(c(1,4,9,0,-3,2,2,7,8),3,3)
m1<-makeCacheMatrix(mat)
cacheSolve(m1)
## Because matrix inversion is a costly computation, it is
## useful to cache an inverse matrix rather than computing
## repeatedly. The functions in this file allow for the
## the compution and caching of an inverse matrix in R.
## This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function () x
setinverse <- function(solve) i <<- solve
getinverse <- function () i
list (set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the
## special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated
## (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
i <- NULL
i <- i$getinverse()
if (!is.null(i)) {
message("getting cached data")
return (i)
}
matrix <- x$get()
i <- solve(matrix, ...)
x$setinverse(i)
i
}
> mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
> mat2 <- makeCacheMatrix(mat)
> cacheSolve(mat2)
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
## Because matrix inversion is a costly computation, it is
## useful to cache an inverse matrix rather than computing
## repeatedly. The functions in this file allow for the
## the compution and caching of an inverse matrix in R.
## This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function () x
setinverse <- function(solve) i <<- solve
getinverse <- function () i
list (set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the
## special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated
## (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
i <- i$getinverse()
if (!is.null(i)) {
message("getting cached data")
return (i)
}
matrix <- x$get()
i <- solve(matrix, ...)
x$setinverse(i)
i
}
## Because matrix inversion is a costly computation, it is
## useful to cache an inverse matrix rather than computing
## repeatedly. The functions in this file allow for the
## the compution and caching of an inverse matrix in R.
## This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function () x
setinverse <- function(inverse) i <<- inverse
getinverse <- function () i
list (set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the
## special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated
## (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
i <- i$getinverse()
if (!is.null(i)) {
message("getting cached data")
return (i)
}
matrix <- x$get()
i <- solve(matrix, ...)
x$setinverse(i)
i
}
asd
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
cacheSolve(mat2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
i
i$getinverse()
i$getinverse
getinverse
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
i
getinverse
i$getinverse
x$setinverse(i)
install.packages("rJava")
library(swirl)
rm(list=ls())
swirl()
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_pacakage, mean(size))
summarize(by_package, mean(size))
submit()
submit()
submit
submit()
head(by_package)
submit()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs=.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=.99)
top_unique <- filter(pack_sum, count > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
top_unique_sorted
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status ="passed")
failed <- mutate(passed, status ="failed")
failed <- mutate(failed, status ="failed")
bind_rows(passed, failed)
sat
?seperate
?separate
submit
submit()
submit()
submit()
setwd("~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment")
test <- scan(file="data/train/X_train.txt")
test <- read(file="data/train/X_train.txt")
test <- read.csv(file="data/train/X_train.txt, sep=" ")
)
""
test <- read.csv(file="data/train/X_train.txt, sep="")
)""
test <- read.table(file="data/train/X_train.txt")
-2.0294171e-002
as.numeric(test$v1)
test$v1
as.numeric(test$V1)
class(test[[2]])
class(test[[1]])
as.numeric(as.character(test$V1))
test$V1 <- as.numeric(as.character(test$V1))
test <- read.table(file="data/train/X_train.txt")
test <- read.table(file="data/train/X_train.txt")
2.8858451e-001
train <- read.table(file="data/train/X_train.txt")
View(train)
class(train[[2]])
class(train[[1]])
test <- read.table(file="data/test/X_test.txt")
subject_train <- read.table(file="data/train/subject_train.txt")
View(subject_train)
test <- read.table(file="data/test/Y_test.txt")
test <- read.table(file="data/test/X_test.txt")
test_variables <- read.table(file="data/test/Y_test.txt")
View(test_variables)
subject_test <- read.table(file="data/test/subject_test.txt")
View(subject_test)
View(test)
View(test_variables)
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
tbl_df(test)
test
tbl_df(test)
variablenames <- read.table(file="data/features.txt")
View(variablenames)
tbl_df(data=test, train)
tbl_df(data=(test, train))
lapply()
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
test
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
View(activity_label)
test
dim(test)
summarise(test)
library(tydr)
library(tidyr)
View(variablenames)
variablenames$V1
rename(test, variablenames$V2)
gather(variablenames)
gather(variablenames, V1, V2)
gather(variablenames, V1, V2, 561:2)
gather(variablenames, V1, V2, 561:0)
gather(variablenames, V1, V2,)
gather(variablenames, V1)
gather(variablenames, V1, 561:0)
gather(variablenames, V2)
spread(variablenames, V2)
spread(variablenames, V1)
spread(variablenames)
spread(variablesnames, V1, V2)
spread(variablenames, V1, V2)
variablenames <- spread(variablenames, V1, V2)
rename(test, variablenames$V2)
rename(test, variablenames)
rename(test, V1=variablenames[[1]])
rename(test, V1=variablenames[1)
rename(test, V1=variablenames[1])
rename(test, V1="tBodyAcc-mean()-X")
?rename
rename(test,[[1]])
rename(test, test)
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
test
variablenames
names(test) <- variablenames
test
names(test) <- variablenames$V2
test
test[ , grepl("Mean"), names( test )))]
test[ , grepl("Mean"), names( test ))]
test[ , grepl("Mean", names( test ))]
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
test[ , grepl("mean", names( test )) | grepl("std", names( test )) ]
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
test_mean_std
View(subject_train)
?cbind
activity_number_train
Activity number
names(activity_number_test) <- "Activity number"
names
activity_number_train
names(activity_number_test) <- c("Activity number")
activity_number_train
names(activity_number_test)
activity_number_train
View(activity_number_test)
View(train)
cbind(activity_number_test, test_mean_std)
head(cbind(activity_number_test, test_mean_std))
head(cbind(subject_test, activity_number_test, test_mean_std))
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
train_mean_std
train_mean_std <- tbl_df(train_mean_std)
test_mean_std <- tbl_df(test_mean_std)
train_mean_std
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
test_mean_std
activity_label
names(activity_label) <- c("activity_id", "Activity label")
names(activity_label) <- c("Activity number", "Activity label")
merge(train_mean_std, activity_label, by.x="Activity number")
head(merge(activity_label, train_mean_std, by.x="Activity number"))
tail(merge(activity_label, train_mean_std, by.x="Activity number"))
train_mean_std[, c(2)]
View(test)
View(activity_label)
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
activity_label
activity_label$Activity_label
activity_label$Activity_label <- c("Walking", "Walking upstairs", "Walking downstairs", "Sitting", "Standing", "Laying")
activity_label$Activity_label
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
activity_label$Activity_label
activity_label$activity_label
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
select(train_mean_std, subject_id, everything())
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
train_mean_std
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
train_mean_std
train_mean_std <- select(train_mean_std, -activity_number, subject_id, everything())
train_mean_std
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
merged_data
View(subject_train)
sort(merged_data, subject_id)
sort(merged_data)
sort(merged_data, "subject_id")
sort(merged_data, "subject_id", decreasing=FALSE)
View(merged_data)
order(merged_data$subject_id)
?order
View(merged_data)
arrange(merged_data, subject_id)
train_mean_std <- select(train_mean_std, -activity_number, subject_id, everything())
arrange(merged_data, subject_id)
train_mean_std <- select(train_mean_std, -activity_number, subject_id, everything())
train_mean_std
train_mean_std <- select(train_mean_std, subject_id, everything())
train_mean_std
arrange(merged_data, subject_id)
train_mean_std <- select(train_mean_std, subject_id, everything())
train_mean_std
arrange(merged_data, subject_id)
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
merged_data
arrange(merged_data, subject_id)
merged_data
source('~/Documents/cursussen/datascience/rworkingdirectory/gacd_assignment/run_analysis.R')
merged_data
